---

- name: Check if GitLab service is available
  uri:
    url: '{{ gitlab_runner__coordinator_url }}'
  register: _gitlab_runner__api_liveness
  when: gitlab_runner__coordinator_url is defined
  check_mode: false
  ignore_errors: true

- name: Check if tokens storage file exists
  stat:
    path: '{{ gitlab_runner__runner_tokens_file }}'
  register: _gitlab_runner__tokens_file

# fetch runner tokens metadata

- name: Fetch runner tokens data
  slurp:
    src: '{{ gitlab_runner__runner_tokens_file }}'
  when: _gitlab_runner__tokens_file.stat.exists
  register: _gitlab_runner__tokens_file_content

- name: Decode runner tokens data
  set_fact:
    _gitlab_runner__tokens: '{{ _gitlab_runner__tokens_file_content.content|b64decode }}'
  when: _gitlab_runner__tokens_file.stat.exists

# init runner tokens metadata

- name: Fetch runner tokens data
  set_fact:
    _gitlab_runner__tokens: {}
  when: not _gitlab_runner__tokens_file.stat.exists

# register runners

- name: Register unregistered runner
  block:

    - name: Register new runners
      uri:
        url: "{{ (instance.url|d(gitlab_runner__coordinator_url)).rstrip('/')~gitlab_runner__registration_endpoint }}"
        body: "{{
          {
            'token': gitlab_runner__registration_token,
            'description': instance.name,
            'tag_list': instance.tags|d([])|unique|join(','),
            'run_untagged': instance.run_untagged|d(gitlab_runner__default_run_untagged),
            'locked': instance.locked|d(gitlab_runner__default_locked)
          }
        }}"
        body_format: json
        method: POST
        headers:
          Content-Type: application/json
        status_code: 201
      with_items: '{{ gitlab_runner__instances }}'
      when: _gitlab_runner__api_liveness.status == 200
        and instance.state|d('present') == 'present'
        and instance.name not in _gitlab_runner__tokens.keys()
      changed_when: _gitlab_runner__register_instances.status == 201
      register: _gitlab_runner__register_instances
      loop_control:
        loop_var: instance

  always:
    - name: Parse tokens from registration query
      set_fact:
        _gitlab_runner__tokens: "{{ _gitlab_runner__tokens|combine({ item.instance.name: item.json.token }) }}"
      with_items: '{{ _gitlab_runner__register_instances.results }}'
      when: not item is skipped
        and not item is failed
        and item is success

    - name: Save runners tokens metadatas
      copy:
        dest: '{{ gitlab_runner__runner_tokens_file }}'
        mode: 0600
        content: '{{ _gitlab_runner__tokens|to_json }}'

# configure runner

- name: Generate GitLab Runner configuration files
  template:
    src: config.toml.j2
    dest: /etc/gitlab-runner/config.toml
    owner: root
    group: root
    mode: 0600
  notify: ['restart-gitlab-runner']

# unregister runner

- name: Unregistered runner if requested
  block:

    - name: unregister old runners
      uri:
        url: "{{ (instance.url|d(gitlab_runner__coordinator_url)).rstrip('/')~gitlab_runner__unregistration_endpoint }}"
        body: "{{
          {
            'token': _gitlab_runner__tokens[instance.name]
          }
        }}"
        body_format: json
        method: DELETE
        headers:
          Content-Type: application/json
        status_code: 204,403
      with_items: '{{ gitlab_runner__instances }}'
      when: _gitlab_runner__api_liveness.status == 200
        and instance.state|d('present') != 'present'
        and instance.name in _gitlab_runner__tokens.keys()
      changed_when: _gitlab_runner__unregister_instances.status == 204
      register: _gitlab_runner__unregister_instances
      loop_control:
        loop_var: instance

  always:
    - name: Parse tokens from unregistration query
      set_fact:
        _gitlab_runner__tokens: '{% set _ = _gitlab_runner__tokens.pop(item.instance.name) %}{{ _gitlab_runner__tokens }}'
      with_items: '{{ _gitlab_runner__unregister_instances.results }}'
      when: not item is skipped
        and not item|failed
        and item is success

    - name: Save runners tokens metadatas
      copy:
        dest: '{{ gitlab_runner__runner_tokens_file }}'
        mode: 0600
        content: '{{ _gitlab_runner__tokens|to_json }}'
